# Define services for Asgard
version: "3.8"

x-logging: &default-logging
  logging:
    driver: json-file
    options:
      max-size: 100m

services:
  ############ MIDGARD ############

  midgard-web:
    container_name: midgard-web
    image: ${REGISTRY:-pantheonix}/midgard:${TAG:-ucv}
    env_file:
      - envs/.env.midgard
    ports:
      - "10000:443"
    volumes:
      - ./envs/certs/midgard/https.crt:/etc/nginx/ssl/https.crt
      - ./envs/certs/midgard/key.pem:/etc/nginx/ssl/key.pem
    restart: always
    profiles:
      - midgard
      - pantheonix

  ############ ODIN ############

  odin-api-gateway:
    container_name: odin-api-gateway
    image: ${REGISTRY:-pantheonix}/odin:${TAG:-ucv}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./envs/certs/asgard/https.crt:/etc/ssl/certs/https.crt
      - ./envs/certs/asgard/key.pem:/etc/ssl/certs/key.pem
    restart: always
    depends_on:
      quetzalcoatl-auth-api:
        condition: service_started
      quetzalcoatl-auth-dapr:
        condition: service_started
      enki-problems-api:
        condition: service_started
      enki-problems-dapr:
        condition: service_started
      anubis-eval-api:
        condition: service_started
      anubis-eval-dapr:
        condition: service_started
    profiles:
      - odin
      - asgard
      - pantheonix

  odin-api-gateway-dapr:
    container_name: odin-api-gateway-dapr
    image: daprio/daprd:1.11.2
    command:
      [
        "./daprd",
        "-app-id",
        "odin-api-gateway",
        "-app-port",
        "5200",
        "-placement-host-address",
        "asgard-dapr-placement:40000",
        "-dapr-http-port",
        "3400",
        "-dapr-grpc-port",
        "30000",
        "-components-path",
        "/components",
        "-config",
        "/config/config.yaml",
      ]
    volumes_from:
      - asgard-dapr-config
    depends_on:
      odin-api-gateway:
        condition: service_started
      asgard-dapr-placement:
        condition: service_started
      asgard-dapr-config:
        condition: service_started
    network_mode: "service:odin-api-gateway"
    profiles:
      - odin
      - asgard
      - pantheonix

  ############ QUETZALCOATL ############

  quetzalcoatl-auth-api:
    container_name: quetzalcoatl-auth-api
    image: ${REGISTRY:-pantheonix}/quetzalcoatl:${TAG:-ucv}
    env_file:
      - envs/.env.quetzalcoatl
    restart: always
    depends_on:
      quetzalcoatl-mssql-db:
        condition: service_started
    profiles:
      - quetzalcoatl
      - asgard
      - pantheonix

  quetzalcoatl-auth-dapr:
    container_name: quetzalcoatl-auth-dapr
    image: daprio/daprd:1.11.2
    command:
      [
        "./daprd",
        "-app-id",
        "quetzalcoatl-auth",
        "-app-port",
        "5210",
        "-placement-host-address",
        "asgard-dapr-placement:40000",
        "-dapr-http-port",
        "3500",
        "-dapr-grpc-port",
        "50000",
        "-components-path",
        "/components",
        "-config",
        "/config/config.yaml",
      ]
    volumes_from:
      - asgard-dapr-config
    depends_on:
      quetzalcoatl-auth-api:
        condition: service_started
      asgard-dapr-placement:
        condition: service_started
      asgard-dapr-config:
        condition: service_started
    network_mode: "service:quetzalcoatl-auth-api"
    profiles:
      - quetzalcoatl
      - asgard
      - pantheonix

  quetzalcoatl-mssql-db:
    container_name: quetzalcoatl-mssql-db
    image: mcr.microsoft.com/mssql/server:2022-latest
    restart: always
    user: root
    env_file:
      - envs/.env.quetzalcoatl
    volumes:
      - quetzalcoatl-db:/var/opt/mssql/data
    profiles:
      - quetzalcoatl
      - asgard
      - pantheonix

  ############ ENKI ############

  enki-problems-api:
    container_name: enki-problems-api
    image: ${REGISTRY:-pantheonix}/enki:${TAG:-ucv}
    env_file:
      - envs/.env.enki
    restart: always
    depends_on:
      enki-mongo-db:
        condition: service_started
      asgard-redis:
        condition: service_started
      hermes-tests-api:
        condition: service_started
      hermes-tests-dapr:
        condition: service_started
    profiles:
      - enki
      - asgard
      - pantheonix

  enki-problems-dapr:
    container_name: enki-problems-dapr
    image: daprio/daprd:1.11.2
    command:
      [
        "./daprd",
        "-app-id",
        "enki-problems",
        "-app-port",
        "5211",
        "-placement-host-address",
        "asgard-dapr-placement:40000",
        "-dapr-http-port",
        "3501",
        "-dapr-grpc-port",
        "50001",
        "-components-path",
        "/components",
        "-config",
        "/config/config.yaml",
      ]
    volumes_from:
      - asgard-dapr-config
    depends_on:
      enki-problems-api:
        condition: service_started
      asgard-dapr-placement:
        condition: service_started
      asgard-dapr-config:
        condition: service_started
    network_mode: "service:enki-problems-api"
    profiles:
      - enki
      - asgard
      - pantheonix

  enki-mongo-db:
    container_name: enki-mongo-db
    image: mongo:5.0
    restart: always
    command: ["--replSet", "enki-rs", "--bind_ip_all", "--port", "30001"]
    volumes:
      - enki-db:/data/db
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'mongo --port 30001 --quiet --eval ''rs.initiate({_id:"enki-rs",members:[{_id:0,host:"enki-mongo-db:30001"}]}).ok || rs.status().ok''',
        ]
      # test: test $(echo "rs.initiate({_id:'enki-rs',members:[{_id:0,host:\"enki-mongo-db:30001\"}]}).ok || rs.status().ok" | mongo --port 30001 --quiet) -eq 1
      interval: 10s
      start_period: 30s
      timeout: 5s
      retries: 3
    profiles:
      - enki
      - asgard
      - pantheonix

  ############ HERMES ############

  hermes-tests-api:
    container_name: hermes-tests-api
    image: ${REGISTRY:-pantheonix}/hermes:${TAG:-ucv}
    env_file:
      - envs/.env.hermes
    restart: always
    depends_on:
      firebase-emulator:
        condition: service_started
    profiles:
      - hermes
      - asgard
      - pantheonix

  hermes-tests-dapr:
    container_name: hermes-tests-dapr
    image: daprio/daprd:1.11.2
    command:
      [
        "./daprd",
        "-app-id",
        "hermes-tests",
        "-app-port",
        "5212",
        "-placement-host-address",
        "asgard-dapr-placement:40000",
        "-dapr-grpc-port",
        "50002",
        "-components-path",
        "/components",
        "-config",
        "/config/config.yaml",
      ]
    volumes_from:
      - asgard-dapr-config
    depends_on:
      hermes-tests-api:
        condition: service_started
      asgard-dapr-placement:
        condition: service_started
      asgard-dapr-config:
        condition: service_started
    network_mode: "service:hermes-tests-api"
    profiles:
      - hermes
      - asgard
      - pantheonix

  firebase-emulator:
    container_name: firebase-emulator
    image: ${REGISTRY:-pantheonix}/firebase-emulator:${TAG:-ucv}
    build:
      context: ./firebase-emulator
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
      - "9099:9099"
      - "9199:9199"
    restart: always
    profiles:
      - hermes
      - asgard
      - pantheonix

  ############ ANUBIS ############

  anubis-eval-api:
    container_name: anubis-eval-api
    image: ${REGISTRY:-pantheonix}/anubis:${TAG:-ucv}
    env_file:
      - envs/.env.anubis
    restart: always
    depends_on:
      server:
        condition: service_started
      judge0-server-dapr:
        condition: service_started
      anubis-psql-db:
        condition: service_started
    profiles:
      - anubis
      - asgard
      - pantheonix

  anubis-eval-dapr:
    container_name: anubis-eval-dapr
    image: daprio/daprd:1.11.2
    command:
      [
        "./daprd",
        "-app-id",
        "anubis-eval",
        "-app-port",
        "5213",
        "-placement-host-address",
        "asgard-dapr-placement:40000",
        "-dapr-http-port",
        "3503",
        "-dapr-grpc-port",
        "50003",
        "-components-path",
        "/components",
        "-config",
        "/config/config.yaml",
      ]
    volumes_from:
      - asgard-dapr-config
    depends_on:
      anubis-eval-api:
        condition: service_started
      asgard-dapr-placement:
        condition: service_started
      asgard-dapr-config:
        condition: service_started
    network_mode: "service:anubis-eval-api"
    profiles:
      - anubis
      - asgard
      - pantheonix

  anubis-psql-db:
    container_name: anubis-psql-db
    image: postgres:14.1
    volumes:
      - anubis-db:/var/lib/postgresql/data/
    restart: always
    env_file:
      - envs/.env.anubis
    profiles:
      - anubis
      - asgard
      - pantheonix

  server:
    image: judge0/judge0:1.13.0
    volumes:
      - ./envs/.env.judge0:/judge0.conf:ro
    privileged: true
    <<: *default-logging
    restart: always
    depends_on:
      workers:
        condition: service_started
      redis:
        condition: service_started
      db:
        condition: service_started
    profiles:
      - anubis
      - asgard
      - pantheonix

  judge0-server-dapr:
    container_name: judge0-server-dapr
    image: daprio/daprd:1.11.2
    command:
      [
        "./daprd",
        "-app-id",
        "judge0-server",
        "-app-port",
        "2358",
        "-placement-host-address",
        "asgard-dapr-placement:40000",
        "-dapr-http-port",
        "3504",
        "-dapr-grpc-port",
        "50004",
        "-components-path",
        "/components",
        "-config",
        "/config/config.yaml",
      ]
    volumes_from:
      - asgard-dapr-config
    depends_on:
      server:
        condition: service_started
      asgard-dapr-placement:
        condition: service_started
      asgard-dapr-config:
        condition: service_started
    network_mode: "service:server"
    profiles:
      - anubis
      - asgard
      - pantheonix

  workers:
    image: judge0/judge0:1.13.0
    command: ["./scripts/workers"]
    volumes:
      - ./envs/.env.judge0:/judge0.conf:ro
    privileged: true
    <<: *default-logging
    restart: always
    profiles:
      - anubis
      - asgard
      - pantheonix

  db:
    image: postgres:13.0
    env_file: ./envs/.env.judge0
    volumes:
      - judge0-db:/var/lib/postgresql/data/
    <<: *default-logging
    restart: always
    profiles:
      - anubis
      - asgard
      - pantheonix

  redis:
    image: redis:6.0
    command:
      [
        "bash",
        "-c",
        'docker-entrypoint.sh --appendonly yes --requirepass "$$REDIS_PASSWORD"',
      ]
    env_file: ./envs/.env.judge0
    volumes:
      - redis-data:/data
    <<: *default-logging
    restart: always
    profiles:
      - anubis
      - asgard
      - pantheonix

  ############ DAPR ############

  asgard-dapr-placement:
    container_name: asgard-dapr-placement
    image: daprio/placement:1.11.2
    command: ["./placement", "-port", "40000", "-log-level", "debug"]
    depends_on:
      asgard-zipkin:
        condition: service_started
      asgard-redis:
        condition: service_started
    profiles:
      - dapr
      - asgard
      - pantheonix

  asgard-redis:
    container_name: asgard-redis
    image: redis:alpine
    profiles:
      - dapr
      - asgard
      - pantheonix

  asgard-zipkin:
    container_name: asgard-zipkin
    image: openzipkin/zipkin:latest
    ports:
      - "19411:9411"
    profiles:
      - dapr
      - asgard
      - pantheonix

  asgard-dapr-config:
    container_name: asgard-dapr-config
    image: ${REGISTRY:-pantheonix}/asgard-dapr:${TAG:-ucv}
    profiles:
      - dapr
      - asgard
      - pantheonix

  ############ VOLUMES ############

volumes:
  quetzalcoatl-db:
    driver: local
  enki-db:
    driver: local
  anubis-db:
    driver: local
  judge0-db:
    driver: local
  redis-data:
    driver: local

  ############ NETWORKS ############

networks:
  default:
    name: asgard-network
    driver: bridge
