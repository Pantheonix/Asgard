admin:
  access_log_path: "/tmp/admin_access.log"
  address:
    socket_address:
      protocol: TCP
      address: 0.0.0.0
      port_value: 4001
static_resources:
  listeners:
  # HTTP listener - routes to Dapr
  # - name: listener_0
  #   address:
  #     socket_address:
  #       protocol: TCP
  #       address: 0.0.0.0
  #       port_value: 443
  #   filter_chains:
  #   - filters:
  #     - name: envoy.filters.network.http_connection_manager
  #       typed_config:
  #         "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
  #         stat_prefix: ingress_http
  #         route_config:
  #           name: asgard_route
  #           virtual_hosts:
  #           - name: asgard
  #             domains: ["*"]
  #             routes:
  #             - name: "quetzalcoatl"
  #               match:
  #                 prefix: "/api/identity"
  #               route:
  #                 auto_host_rewrite: true
  #                 prefix_rewrite: "/v1.0/invoke/quetzalcoatl-auth/method/api"
  #                 cluster: dapr
  #             - name: "enki"
  #               match:
  #                 prefix: "/api/problems"
  #               route:
  #                 auto_host_rewrite: true
  #                 prefix_rewrite: "/v1.0/invoke/enki-problems/method/api/enki/problem"
  #                 cluster: dapr
  #             - name: "anubis"
  #               match:
  #                 prefix: "/api/eval"
  #               route:
  #                 auto_host_rewrite: true
  #                 prefix_rewrite: "/v1.0/invoke/anubis-eval/method/api"
  #                 cluster: dapr
  #         http_filters:
  #         - name: envoy.filters.http.router
  # HTTPS listener - routes to services - SSL disabled for now
  - name: listener_0
    address:
      socket_address:
        protocol: TCP
        address: 0.0.0.0
        port_value: 80
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
          stat_prefix: ingress_http
          route_config:
            name: asgard_route
            virtual_hosts:
            - name: asgard
              domains: ["*"]
              routes:
              - match:
                  prefix: "/"
                redirect:
                  path_redirect: "/"
                  https_redirect: true
          http_filters:
          - name: envoy.router
            config: {}
  - name: listener_1
    address:
      socket_address:
        protocol: TCP
        address: 0.0.0.0
        port_value: 443
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
          stat_prefix: ingress_http
          route_config:
            name: asgard_route
            virtual_hosts:
            - name: asgard
              domains: ["*"]
              routes:
              - name: "quetzalcoatl"
                match:
                  prefix: "/api/identity"
                route:
                  auto_host_rewrite: true
                  prefix_rewrite: "/api"
                  cluster: quetzalcoatl
              - name: "enki"
                match:
                  prefix: "/api/problems"
                route:
                  auto_host_rewrite: true
                  prefix_rewrite: "/api/enki/problem"
                  cluster: enki
              - name: "anubis"
                match:
                  prefix: "/api/eval"
                route:
                  auto_host_rewrite: true
                  prefix_rewrite: "/api"
                  cluster: anubis
          http_filters:
          - name: envoy.filters.http.lua
            config:
              inline_code: |
                function envoy_on_request(request_handle)
                  local path = request_handle:headers():get(":path")
                  if string.match(path, "^/api/problems/[^/]+/eval%-metadata$") then
                      request_handle:logWarn("Request to eval-metadata should be denied for external clients")
                      request_handle:respond({ [":status"] = "404" }, "Not Found")
                  end
                end
          # get the content of the AccessToken cookie and add it to the request authorization header as bearer token
          - name: envoy.filters.http.lua
            config:
              inline_code: |
                function envoy_on_request(request_handle)
                  local headers = request_handle:headers()
                  local cookie = headers:get("cookie")
                  if cookie then
                    local token = string.match(cookie, ".AspNetCore.AccessToken=([^;]+)")
                    if token then
                      headers:add("authorization", "Bearer " .. token)
                    end
                  end
                end
          # get the content of the RefreshToken cookie
          # get the userId from the request body
          # add the userId and RefreshToken to the request body
          # forward the request to the auth service
          # get the new access token from the response body
          # set the new access token in the response cookie
          # forward the response to the client
          - name: envoy.filters.http.lua
            config:
              inline_code: |
                function envoy_on_request(request_handle)
                  local path = request_handle:headers():get(":path")
                  local method = request_handle:headers():get(":method")
                  request_handle:logInfo("Request path: " .. path)
                  request_handle:logInfo("Method: " .. method)

                 if string.match(path, "^/api/identity/auth/refresh%-token$") and method == "POST" then
                    request_handle:logInfo("Request path matched")

                    local headers = request_handle:headers()
                    request_handle:logInfo("Headers grabbed")

                    local cookie = headers:get("cookie")
                    request_handle:logInfo("Cookies grabbed")

                    if not cookie then
                      request_handle:logInfo("No cookies found")
                      request_handle:respond(
                        {
                          [":status"] = "400",
                          ["access-control-allow-credentials"] = "true",
                          ["access-control-allow-origin"] = headers:get("origin")
                        },
                        "Invalid refresh token, please login again"
                      )
                      return
                    end

                    local body = request_handle:body()
                    request_handle:logInfo("Body grabbed")

                    local body_str = body:getBytes(0, body:length())
                    request_handle:logInfo("Request body: " .. body_str)

                    local user_id = string.match(body_str, '"userId":"([^"]+)"')
                    local refresh_token = string.match(cookie, ".AspNetCore.RefreshToken=([^;]+)")

                    if not user_id or not refresh_token then
                      request_handle:respond(
                        {
                          [":status"] = "400",
                          ["access-control-allow-credentials"] = "true",
                          ["access-control-allow-origin"] = request_handle:headers():get("origin")
                        },
                        "Invalid refresh token, please login again"
                      )
                      return
                    end

                    request_handle:logInfo("UserId: " .. user_id)
                    request_handle:logInfo("RefreshToken: " .. refresh_token)

                    local new_body = '{"userId":"' .. user_id .. '","refreshToken":"' .. refresh_token .. '"}'
                    request_handle:logInfo("New body: " .. new_body)
                    local response_headers, response_body = request_handle:httpCall(
                      "quetzalcoatl",
                      {
                        [":method"] = "POST",
                        [":path"] = "/api/auth/refresh-token",
                        [":authority"] = request_handle:headers():get(":authority"),
                        ["content-type"] = "application/json",
                        ["content-length"] = string.len(new_body)
                      },
                      new_body,
                      5000
                    )

                    for key, value in pairs(response_headers) do
                      request_handle:logInfo("Response header: " .. key .. " = " .. value)
                    end
                    request_handle:logInfo("Response body: " .. response_body)

                    if response_headers[":status"] ~= "200" then
                      request_handle:respond(
                        response_headers,
                        response_body
                      )
                      return
                    end
                    
                    local new_access_token = string.match(response_body, '"accessToken":"([^"]+)"')
                    request_handle:logInfo("New access token: " .. new_access_token)

                    local expirySeconds = 3600
                    local path = "/"
                    local cookieName = ".AspNetCore.AccessToken"
                    local expires = os.date("!%a, %d %b %Y %H:%M:%S GMT", os.time() + expirySeconds)

                    local cookieAttributes = {
                        "HttpOnly",
                        "Expires=" .. expires,
                        "Path=" .. path,
                        "SameSite=None",
                        "Secure"
                    }

                    local new_cookie = cookieName .. "=" .. new_access_token .. "; " .. table.concat(cookieAttributes, "; ")
                    response_headers["set-cookie"] = new_cookie
                    response_headers["access-control-allow-credentials"] = "true"
                    response_headers["access-control-allow-origin"] = request_handle:headers():get("origin")

                    request_handle:respond(
                      response_headers,
                      "{\"userId\":\"" .. user_id .. "\"}"
                    )
                  end
                end
          - name: envoy.filters.http.router
      tls_context:
        common_tls_context:
          tls_certificates:
            - certificate_chain:
                filename: "/etc/ssl/certs/https.crt"
              private_key:
                filename: "/etc/ssl/certs/key.pem"
  clusters:
  - name: dapr
    connect_timeout: 0.25s
    type: logical_dns
    dns_lookup_family: V4_ONLY
    lb_policy: round_robin
    load_assignment:
      cluster_name: dapr
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: 127.0.0.1
                port_value: 3400
  - name: quetzalcoatl
    connect_timeout: 0.25s
    type: logical_dns
    dns_lookup_family: V4_ONLY
    lb_policy: round_robin
    load_assignment:
      cluster_name: quetzalcoatl
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: quetzalcoatl-auth-api
                port_value: 5210
  - name: enki
    connect_timeout: 0.25s
    type: logical_dns
    dns_lookup_family: V4_ONLY
    lb_policy: round_robin
    load_assignment:
      cluster_name: enki
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: enki-problems-api
                port_value: 5211
  - name: anubis
    connect_timeout: 0.25s
    type: logical_dns
    dns_lookup_family: V4_ONLY
    lb_policy: round_robin
    load_assignment:
      cluster_name: anubis
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: anubis-eval-api
                port_value: 5213